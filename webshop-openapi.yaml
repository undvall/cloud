openapi: 3.0.1
info:
  title: Web-shop API
  description: >
    This is supposed to be a REST API for a webshop.
  version: 1.0.0
paths:
  /products:
    get:
      summary: Retrieve all products in the shop
      responses:
        200:
          description: List of every product
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /products/{productId}/subscribe:
    post:
      summary: Get notification when product is back in stock
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                callbackUrl:
                  type: string
                  format: uri
                  example: https://awesomeVinylWebShop.ax/send/callback/here
              required:
                - callbackUrl
      callbacks:
        myEvent: 
          '{$request.body#/callbackUrl}':
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        message:
                          type: string
                          example: You will receive notifications
                      required:
                        - message
              responses:
                200:
                  description: Callback event created
      responses:
        201:
          description: Subscription created
        404:
          description: Product not found
  /send/callback/here:
    post:
      summary: Send notification callback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: ID of the product that is back in stock
                message:
                  type: string
                  example: Product is back in stock
      responses:
        200:
          description: Notification sent successfully
  /cart:
    get:
      summary: Retrieve the cart
      responses:
        200:
          description: Cart response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Cart'
                  - $ref: '#/components/schemas/DetailedCartInfo'
        404:
          description: Could not find cart
    post:
      summary: Create a new cart
      responses:
        201:
          description: Cart successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        400:
          description: Could not create cart
  /order:
    post:
      summary: Create a new order based on an existing cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cartId:
                  type: string
                  description: ID of the cart to create the order from
                shippingAddress:
                  $ref: '#/components/schemas/Address'
                billingAddress:
                  $ref: '#/components/schemas/Address'
      responses:
        201:
          description: Order successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid request body. Check cartId and address.
  /cart/{cartId}/items/{productId}:
    put:
      summary: Add or remove products from cart
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: string
        - in: path
          name: productId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  description: Updates quantity of the product in the cart (0 removes every product with that id)
                  minimum: 0
      responses:
        200:
          description: Product(s) added to cart
        204:
          description: Product(s) removed from cart
        404:
          description: Could not find cartId or productId
components:
  schemas:
    Product:
      type: object
      description: Representation of a Product Resource
      properties:
        id:
          type: string
        name:
          type: string
        productType:
          type: string
        productInformation:
          type: array
          items:
            type: object
            properties:
              label:
                type: string
              releaseYear:
                type: integer
        price:
          type: number
        imageUrl:
          type: string
          format: uri
    Cart:
      type: object
      description: Representation of a Cart Resource
      properties: 
        cartId:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    DetailedCartInfo:
      type: object
      description: Detailed information about cart cost
      properties:
        totalCost:
          type: number
          description: Total cost of all products in the cart
        currency:
          type: string
          description: Currency of the total cost
    Address:
      type: object
      description: Parent Representation of an Address
      properties:
        street:
          type: string
        city:
          type: string
        zipCode:
          type: string
        country:
          type: string
    ShippingAddress:
      allOf:
        - $ref: '#/components/schemas/Address'
      description: Shipping address for the order
      properties:
        shippingAddress:
          type: string
          description: Choose if this is the shippingaddress
    BillingAddress:
      allOf:
        - $ref: '#/components/schemas/Address'
      description: Billing address for the order
      properties:
        billingAddress:
          type: string
          description: Choose if this is the billingaddress
    Order:
      type: object
      description: Representation of an Order Resource
      properties:
        orderId:
          type: string
          description: Unique identifier for the order
        cartId:
          type: string
          description: ID of the cart used to create the order
        address:
          oneOf:
            - $ref: '#/components/schemas/ShippingAddress'
            - $ref: '#/components/schemas/BillingAddress'
          description: Address for the order
